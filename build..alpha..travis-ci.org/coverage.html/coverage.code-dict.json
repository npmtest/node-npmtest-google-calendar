{"/home/travis/build/npmtest/node-npmtest-google-calendar/test.js":"/* istanbul instrument in package npmtest_google_calendar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-calendar/lib.npmtest_google_calendar.js":"/* istanbul instrument in package npmtest_google_calendar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_google_calendar = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_google_calendar = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-google-calendar/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-google-calendar && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_google_calendar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_google_calendar\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_google_calendar.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_google_calendar.rollup.js'] =\n            local.assetsDict['/assets.npmtest_google_calendar.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_google_calendar.__dirname +\n                    '/lib.npmtest_google_calendar.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-calendar/node_modules/google-calendar/GoogleCalendar.js":"module.exports = function(access_token) {\n  return new GoogleCalendar(access_token);\n}\nmodule.exports.GoogleCalendar = GoogleCalendar;\n\nvar util   = require('util');\nvar needle = require('needle');\n\nfunction GoogleCalendar(access_token){\n  \n  this.request  = function(type, path, params, options, body, callback) {  \n    \n    var url = 'https://www.googleapis.com/calendar/v3'+path+'?access_token='+access_token;\n    \n    params = params || {}\n    options = options || {}\n    options.json = true;\n    \n    type = type.toUpperCase();\n    if(body && typeof body !== 'string') body = JSON.stringify(body);\n    \n    \n    for(var k in params){\n      url += '&'+encodeURIComponent(k)+'='+ encodeURIComponent(params[k]);\n    }\n    \n    needle.request(type, url, body, options, responseHandler);\n    \n    function responseHandler(error, response, body) {\n      if(error) return callback(error, body);\n      if(body.error) return callback(body.error, null);\n      return callback(null, body);\n    }\n  };\n  \n  this.acl      = new Acl(this.request);\n  this.calendarList = new CalendarList(this.request);\n  this.calendars = new Calendars(this.request);\n  this.events   = new Events(this.request);\n  this.freebusy = new Freebusy(this.request);\n  this.settings = new Settings(this.request);\n}\n\n// Acl\nfunction Acl(request){ this.request = request; }\n\nAcl.prototype.delete = function(calendarId, ruleId, callback) {\n  calendarId = encodeURIComponent(calendarId);\n  ruleId     = encodeURIComponent(ruleId);\n\n  this.request('DEL', '/calendars/' + calendarId + '/acl/' + ruleId, \n    {}, {}, null, callback);\n}\n\nAcl.prototype.get = function(calendarId, ruleId, callback) {\n  calendarId = encodeURIComponent(calendarId);\n  ruleId     = encodeURIComponent(ruleId);\n\n  this.request('GET', '/calendars/' + calendarId + '/acl/' + ruleId, \n    {}, {}, null, callback);\n}\n\nAcl.prototype.insert = function(calendarId, acl, callback) {\n  calendarId = encodeURIComponent(calendarId);\n\n  this.request('POST', '/calendars/' + calendarId + '/acl', \n    {}, {}, acl, callback);\n}\n\nAcl.prototype.list = function(calendarId, callback) {\n  calendarId = encodeURIComponent(calendarId);\n\n  this.request('GET', '/calendars/' + calendarId + '/acl', \n    {}, {}, null, callback);\n}\n\nAcl.prototype.update = function(calendarId, ruleId, acl, callback) {\n  calendarId = encodeURIComponent(calendarId);\n  ruleId     = encodeURIComponent(ruleId);\n  \n  this.request('PUT', '/calendars/' + calendarId + '/acl/' + ruleId, \n    {}, {}, acl, callback);\n}\n\nAcl.prototype.patch = function(calendarId, ruleId, acl, callback) {\n  calendarId = encodeURIComponent(calendarId);\n  ruleId     = encodeURIComponent(ruleId);\n  \n  this.request('PATCH', '/calendars/' + calendarId + '/acl/' + ruleId, \n    {}, {}, acl, callback);\n}\n\n\n\n// CalendarList\nfunction CalendarList(request){ this.request = request; }\n\nCalendarList.prototype.delete = function(calendarId, option, callback) {\n  if(!callback){ callback = option; option = {}; }\n  calendarId = encodeURIComponent(calendarId);\n  this.request('DELETE', '/users/me/calendarList/'+calendarId, option, {}, null, callback);\n}\n\nCalendarList.prototype.get = function(calendarId, option, callback) {\n  if(!callback){ callback = option; option = {}; }\n  calendarId = encodeURIComponent(calendarId);\n  this.request('GET', '/users/me/calendarList/'+calendarId, option, {}, null, callback);\n}\n\nCalendarList.prototype.insert = function(calendarList, option, callback) {\n  if(!callback){ callback = option; option = {} }\n  this.request('POST', '/users/me/calendarList', option, {}, calendarList, callback);\n}\n\nCalendarList.prototype.list = function(option, callback) {\n  if(!callback){ callback = option; option = {} }\n  this.request('GET', '/users/me/calendarList', option, {}, null, callback);\n}\n\nCalendarList.prototype.update = function(calendarId, calendarList, option, callback) {\n  if(!callback){ callback = option; option = {} }\n  calendarId = encodeURIComponent(calendarId);\n  this.request('PUT', '/users/me/calendarList/'+calendarId, option, {}, calendarList, callback);\n}\n\nCalendarList.prototype.patch = function(calendarId, calendarList, option, callback) {\n  if(!callback){ callback = option; option = {} }\n  calendarId = encodeURIComponent(calendarId);\n  this.request('PATCH', '/users/me/calendarList/'+calendarId, option, {}, calendarList, callback);\n}\n\n\n// Calendars\nfunction Calendars(request){ this.request = request; }\n\nCalendars.prototype.clear = function(calendarId, option, callback) {\n  if(!callback){ callback = option; option = {}; }\n  calendarId = encodeURIComponent(calendarId);\n  this.request('POST', '/calendars/'+calendarId+'/clear', option, {}, null, callback);\n}\n\nCalendars.prototype.delete = function(calendarId, option, callback) {\n  if(!callback){ callback = option; option = {}; }\n  calendarId = encodeURIComponent(calendarId);\n  this.request('DELETE', '/calendars/'+calendarId, option, {}, null, callback);\n}\n\nCalendars.prototype.get = function(calendarId, option, callback) {\n  if(!callback){ callback = option; option = {}; }\n  calendarId = encodeURIComponent(calendarId);\n  this.request('GET', '/calendars/'+calendarId, option, {}, null, callback);\n}\n\nCalendars.prototype.insert = function(calendar, option, callback) {\n  if(!callback){ callback = option; option = {}; }\n  this.request('POST', '/calendars',  option, {}, calendar, callback);\n}\n\nCalendars.prototype.update = function(calendarId, calendar, option, callback) {\n  if(!callback){ callback = option; option = {}; }\n  calendarId = encodeURIComponent(calendarId);\n  this.request('PUT', '/calendars/'+calendarId,  option, {}, calendar, callback);\n}\n\nCalendars.prototype.patch = function() {\n  if(!callback){ callback = option; option = {}; }\n  calendarId = encodeURIComponent(calendarId);\n  this.request('PATCH', '/calendars/'+calendarId,  option, {}, calendar, callback);\n}\n\n\n\n// Events\nfunction Events(request){ this.request = request; }\n\n\nEvents.prototype.delete = function(calendarId, eventId, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  eventId    = encodeURIComponent(eventId);\n  \n  this.request('DELETE', '/calendars/'+calendarId+'/events/'+eventId, \n    option, {}, null, callback);\n}\n\nEvents.prototype.get = function(calendarId, eventId, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  eventId    = encodeURIComponent(eventId);\n  \n  this.request('GET', '/calendars/'+calendarId+'/events/'+eventId, \n    option, {}, null, callback);\n}\n\nEvents.prototype.import = function(calendarId, event, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  \n  this.request('POST', '/calendars/'+calendarId+'/events/import', \n    option, {}, event, callback);\n}\n\nEvents.prototype.insert = function(calendarId, event, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  \n  this.request('POST', '/calendars/'+calendarId+'/events', \n    option, {}, event, callback);\n}\n\nEvents.prototype.instances = function(calendarId, eventId, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  eventId    = encodeURIComponent(eventId);\n  \n  this.request('GET', '/calendars/'+calendarId+'/events/'+eventId+'/instances', \n    option, {}, null, callback);\n}\n\nEvents.prototype.list = function(calendarId, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  \n  this.request('GET', '/calendars/'+calendarId+'/events', \n    option, {}, null, callback);\n}\n\nEvents.prototype.move = function(calendarId, eventId, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  eventId    = encodeURIComponent(eventId);\n  \n  this.request('POST', '/calendars/'+calendarId+'/events/'+eventId+'/move', \n    option, {}, null, callback);\n}\n\nEvents.prototype.quickAdd = function(calendarId, text, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  \n  option.text = text;\n  calendarId = encodeURIComponent(calendarId);\n  \n  this.request('POST', '/calendars/'+calendarId+'/events/quickAdd', \n    option, {}, null, callback);\n}\n\nEvents.prototype.update = function(calendarId, eventId, update, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  eventId    = encodeURIComponent(eventId);\n  \n  this.request('PUT', '/calendars/'+calendarId+'/events/'+eventId, \n    option, {}, update, callback);\n}\n\nEvents.prototype.patch = function(calendarId, eventId, patch, option, callback) {\n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  eventId    = encodeURIComponent(eventId);\n  \n  this.request('PATCH', '/calendars/'+calendarId+'/events/'+eventId, \n    option, {}, patch, callback);\n}\n\nEvents.prototype.watch = function(calendarId, watch_request, option, callback){\n  if(!callback){ callback = option; option = {}; }\n  \n  calendarId = encodeURIComponent(calendarId);\n  \n  this.request('POST', '/calendars/'+calendarId+'/events/watch', \n    option, {}, watch_request, callback);\n}\n\nEvents.prototype.stopWatch = function(stop_request, callback){\n\n  this.request('POST', '/channels/stop', \n    {}, {}, stop_request, callback);\n}\n\n\n// Freebusy\nfunction Freebusy(request){ this.request = request; }\n\nFreebusy.prototype.query = function(query, option, callback) {\n  \n  if(!callback){ callback = option; option = {}; }\n  this.request('POST', '/freeBusy/', option, {}, query, callback);\n}\n\n// Settings\nfunction Settings(request){ this.request = request; }\n\n\nSettings.prototype.list = function(callback) {\n\n  this.request('GET', '/users/me/settings', \n    {}, {}, null, callback);\n}\n\nSettings.prototype.get = function(setting, callback) {\n  setting = encodeURIComponent(setting)\n\n  this.request('GET', '/users/me/settings/'+setting, \n    {}, {}, null, callback);\n}\n\n\n","/home/travis/build/npmtest/node-npmtest-google-calendar/node_modules/google-calendar/specs/acl.spec.js":"var config = global.config = require(__dirname + '/config.js');\nvar util   = require('util');\nvar should = require('should');\nvar async  = require('async');\nvar needle = require('needle');\n\nvar google_calendar   = require(__dirname +'/../GoogleCalendar.js');\n\n\nfunction getAccessToken(callback){\n  \n  var url = 'https://accounts.google.com/o/oauth2/token';\n  var content = {\n    refresh_token: config.refresh_token,\n    client_id:     config.consumer_key,\n    client_secret: config.consumer_secret,\n    grant_type:'refresh_token',\n  }\n  \n  needle.post(url, content, function(err, resp, body) {\n    if(resp.statusCode != 200){\n      return callback(body, null, null);\n    }  \n    \n    return callback(null, body.access_token, new Date().getTime() + (body.expires_in-3) * 1000);\n  })\n} \n\ndescribe('google_calendar.acl',function() {\n  \n  var calendar = null;\n  var gcal = null;\n  before(function(done) {    \n    getAccessToken(function(err, access_token) {\n      if(err) return done(err);\n\n      gcal = google_calendar(access_token);\n      gcal.calendarList.list(function(err, result) {\n\n        should.not.exist(err);\n        should.exist(result);\n        should.exist(result.items);\n        should.exist(result.items.length);\n\n        calendar = result.items[0]\n        done();\n      })\n    })\n  })\n  \n  describe('#list()',function() {\n    \n    it('return the calendar list' , function(done){\n\n      gcal.acl.list(calendar.id, function(err, result) {\n\n        should.not.exist(err);\n        should.exist(result);\n        should.exist(result.items);\n        should.exist(result.items.length);\n        done();\n      })\n    })\n  })\n\n})\n\n","/home/travis/build/npmtest/node-npmtest-google-calendar/node_modules/google-calendar/specs/config.js":"\nmodule.exports = {\n\t\t\n\tconsumer_key   : '666108035561-9m2nqih47c1j8a6462ch4hbq016ifris.apps.googleusercontent.com',\n    consumer_secret  : 'p3yNSofmFXvOXc8PD4vdhvQg',\n    refresh_token    : '1/aPRMlwdAlGDUpCrE58ojujen4KUHIgA02OMcuonSbus',\n}\n","/home/travis/build/npmtest/node-npmtest-google-calendar/node_modules/google-calendar/specs/calendar.spec.js":"var config = global.config = require(__dirname + '/config.js');\nvar util   = require('util');\nvar should = require('should');\nvar async  = require('async');\nvar needle = require('needle');\n\nvar google_calendar   = require(__dirname +'/../GoogleCalendar.js');\n\n\nfunction getAccessToken(callback){\n  \n  var url = 'https://accounts.google.com/o/oauth2/token';\n  var content = {\n    refresh_token: config.refresh_token,\n    client_id:     config.consumer_key,\n    client_secret: config.consumer_secret,\n    grant_type:'refresh_token',\n  }\n  \n  needle.post(url, content, function(err, resp, body) {\n    if(resp.statusCode != 200){\n      return callback(body, null, null);\n    }  \n    \n    return callback(null, body.access_token, new Date().getTime() + (body.expires_in-3) * 1000);\n  })\n}\n\ndescribe('google_calendar.calendar',function() {\n  \n  var gcal = null;\n  before(function(done) {    \n    getAccessToken(function(err, access_token) {\n      if(err) return done(err);\n      gcal = google_calendar(access_token);\n      done();\n    })\n  })\n  \n  describe('#get()',function() {\n    \n    it('return the calendar' , function(done){\n\n      gcal.calendarList.list(function(err, _result) {\n\n        should.not.exist(err);\n        should.exist(_result);\n        should.exist(_result.items[0]);\n\n        gcal.calendars.get(_result.items[0].id,function(err, result) {\n  \n          should.not.exist(err);\n          should.exist(result);\n          result.id.should.equal(_result.items[0].id)\n          result.kind.should.equal('calendar#calendar')\n          done()\n        })\n      })\n    })\n  })\n\n\n  describe('insert and delete',function() {\n    \n    var inserted_calendar_id = null;\n    var calendar = { summary: 'Test' }\n\n    it('return create a new calendar and delete it' , function(done){\n      gcal.calendars.insert(calendar, function(err, result) {\n        \n        should.not.exist(err);\n        should.exist(result);\n        inserted_calendar_id = result.id\n        \n        gcal.calendars.delete(inserted_calendar_id, function(err, result) {\n          should.not.exist(err);\n          should.exist(result);\n          \n          done()\n        })\n      })\n    })\n    \n  })\n\n})\n\n","/home/travis/build/npmtest/node-npmtest-google-calendar/node_modules/google-calendar/specs/calendar_list.spec.js":"var config = global.config = require(__dirname + '/config.js');\nvar util   = require('util');\nvar should = require('should');\nvar async  = require('async');\nvar needle = require('needle');\n\nvar google_calendar   = require(__dirname +'/../GoogleCalendar.js');\n\n\nfunction getAccessToken(callback){\n  \n  var url = 'https://accounts.google.com/o/oauth2/token';\n  var content = {\n    refresh_token: config.refresh_token,\n    client_id:     config.consumer_key,\n    client_secret: config.consumer_secret,\n    grant_type:'refresh_token',\n  }\n  \n  needle.post(url, content, function(err, resp, body) {\n    if(resp.statusCode != 200){\n      return callback(body, null, null);\n    }  \n    \n    return callback(null, body.access_token, new Date().getTime() + (body.expires_in-3) * 1000);\n  })\n}\n\ndescribe('google_calendar.calendarList',function() {\n  \n  var gcal = null;\n  before(function(done) {    \n    getAccessToken(function(err, access_token) {\n      if(err) return done(err);\n      gcal = google_calendar(access_token);\n      done();\n    })\n  })\n  \n  describe('#list()',function() {\n    \n    it('return the calendar list' , function(done){\n\n      gcal.calendarList.list(function(err, result) {\n\n        should.not.exist(err);\n        should.exist(result);\n        should.exist(result.items);\n        should.exist(result.items.length);\n        done();\n      })\n    })\n\n    it('return the calendar list with parameters' , function(done){\n\n      gcal.calendarList.list({maxResults:1}, function(err, result) {\n\n        should.not.exist(err);\n        should.exist(result);\n        should.exist(result.items);\n        should.exist(result.items.length);\n        result.items.should.have.length(1);\n        done();\n      })\n    })\n  })\n\n})\n\n","/home/travis/build/npmtest/node-npmtest-google-calendar/node_modules/google-calendar/specs/event.spec.js":"var config = global.config = require(__dirname + '/config.js');\nvar util   = require('util');\nvar should = require('should');\nvar async  = require('async');\nvar needle = require('needle');\n\nvar google_calendar   = require(__dirname +'/../GoogleCalendar.js');\n\n\nfunction getAccessToken(callback){\n  \n  var url = 'https://accounts.google.com/o/oauth2/token';\n  var content = {\n    refresh_token: config.refresh_token,\n    client_id:     config.consumer_key,\n    client_secret: config.consumer_secret,\n    grant_type:'refresh_token',\n  }\n  \n  needle.post(url, content, function(err, resp, body) {\n    if(resp.statusCode != 200){\n      return callback(body, null, null);\n    }  \n    \n    return callback(null, body.access_token, new Date().getTime() + (body.expires_in-3) * 1000);\n  })\n}\n\ndescribe('google_calendar.events',function() {\n  \n  var gcal = null;\n  var calendar_id = null;\n\n  before(function(done) {    \n    getAccessToken(function(err, access_token) {\n      if(err) return done(err);\n      gcal = google_calendar(access_token);\n      gcal.calendars.insert({summary:'Test'}, function(err, result) {\n\n        should.not.exist(err);\n        should.exist(result);\n        calendar_id = result.id\n        \n        done();\n      })\n    })\n  })\n\n  after(function(done) {\n    gcal.calendars.delete(calendar_id, function(err, result) {\n      done();\n    })\n  })\n\n  describe('#list()',function() {\n    \n    it('return the events list' , function(done){\n      gcal.events.list(calendar_id, function(err, result) {\n\n        should.not.exist(err);\n        should.exist(result);\n        should.exist(result.items);\n        should.exist(result.items.length);\n        done()\n      })\n    })\n\n    it('return the events list according to the query option' , function(done){\n      gcal.events.list(calendar_id, { orderBy : 'updated', maxResults: 1 }, function(err, result) {\n\n        should.not.exist(err);\n        should.exist(result);\n        should.exist(result.items);\n        should.exist(result.items.length);\n        done()\n      })\n    })\n  }) \n  \n  describe('#insert()',function() {\n    \n    var event = { summary:'Hello World' , \n      start: { dateTime: new Date().toISOString() }, \n      end: { dateTime: new Date().toISOString() } \n    } \n\n    it('return an event' , function(done){\n      gcal.events.insert(calendar_id, event, function(err, result) {\n\n        should.not.exist(err);\n        should.exist(result);\n        should.exist(result.id);\n\n        result.summary.should.equal(event.summary);\n        done()\n      })\n    })\n  }) \n\n  describe('#watch()',function() {\n    \n    it('available' , function(done){\n\n      var watch_request = { \n          \"id\"     : \"01234567-89ab-cdef-0123456789ab\", \n          \"type\"   : \"web_hook\",\n          \"address\": \"https://wanasit.github.io/notifications\", \n        }\n\n      gcal.events.watch(calendar_id, watch_request, function(err, result) {\n\n        if(err) { \n          //No tesing at this point \n          //console.log(err)  \n        } else {\n          //No tesing at this point \n          //console.log(result) \n        }\n        \n        done()\n      })\n    })\n  }) \n\n\n  describe('#stopWatch()',function() {\n    \n    it('available' , function(done){\n\n      var stop_request = {\n        \"id\": \"4ba78bf0-6a47-11e2-bcfd-0800200c9a66\",\n        \"resourceId\": \"ret08u3rv24htgh289g\"\n      }\n\n      gcal.events.stopWatch(stop_request, function(err, result) {\n\n        if(err) { \n          //No tesing at this point \n          //console.log(err)  \n        } else {\n          //No tesing at this point \n          //console.log(result) \n        }\n        \n        done()\n      })\n    })\n  }) \n  \n\n})\n\n","/home/travis/build/npmtest/node-npmtest-google-calendar/node_modules/google-calendar/specs/setting.spec.js":"var config = global.config = require(__dirname + '/config.js');\nvar util   = require('util');\nvar should = require('should');\nvar async  = require('async');\nvar needle = require('needle');\n\nvar google_calendar   = require(__dirname +'/../GoogleCalendar.js');\n\n\nfunction getAccessToken(callback){\n  \n  var url = 'https://accounts.google.com/o/oauth2/token';\n  var content = {\n    refresh_token: config.refresh_token,\n    client_id:     config.consumer_key,\n    client_secret: config.consumer_secret,\n    grant_type:'refresh_token',\n  }\n  \n  needle.post(url, content, function(err, resp, body) {\n    if(resp.statusCode != 200){\n      return callback(body, null, null);\n    }  \n    \n    return callback(null, body.access_token, new Date().getTime() + (body.expires_in-3) * 1000);\n  })\n}\n\ndescribe('google_calendar.setting',function() {\n  \n  var gcal = null;\n  before(function(done) {    \n    getAccessToken(function(err, access_token) {\n      if(err) return done(err);\n      gcal = google_calendar(access_token);\n      done();\n    })\n  })\n  \n  describe('#list()',function() {\n    \n    it('return the calendar list' , function(done){\n\n      gcal.settings.list(function(err, result) {\n        \n        should.not.exist(err);\n        should.exist(result);\n        should.exist(result.items);\n        should.exist(result.items.length);\n        done();\n      })\n    })    \n  })\n\n})\n\n"}